# vim: syntax=bash
@options timing

@goal serve
@doc 'serves local development jekyll server'
  bundle exec jekyll serve -w

@goal deploy_rsa_encrypt
@depends_on openssl_installed
@doc 'prepares deploy_rsa.enc'
  echo 'Enter pass:'
  read PASS
  ./soft/openssl aes-256-cbc -e -iter 100 -in ~/Downloads/deploy_rsa -out ./deploy_rsa.enc -k "$PASS"
  echo $'File deploy_rsa.enc is changed. Don\'t forget to commit.'

@define OPENSSL_URL='https://www.openssl.org/source/old/1.1.1/openssl-1.1.1l.tar.gz'

@goal openssl_installed @private
@doc 'installs local openssl of latest version'
@reached_if [[ -e ./soft/openssl ]]
@depends_on soft_folder_created
  cd soft
  wget "$OPENSSL_URL" -O openssl.tar.gz
  tar xzvf openssl.tar.gz
  cd openssl-1.*
  ./config
  make
  cp \
    ./apps/openssl \
    libssl.so.1.1 \
    libcrypto.so.1.1 \
    ..
  cd ..
  ./openssl version
  rm -r openssl.tar.gz openssl-1.*

@goal soft_folder_created @private
@reached_if [[ -d "soft" ]]
  mkdir soft

@goal deploy_rsa_decrypted
@doc '[github] decrypts deploy_rsa'
  if [[ -z "$DEPLOY_RSA_KEY" ]]
  then
    echo 'DEPLOY_RSA_KEY env variable missing (should be set in https://github.com/xonixx/cml-site-jekyll/settings/secrets/actions)'
    exit 1
  fi

  openssl aes-256-cbc -iter 100 \
    -k "$DEPLOY_RSA_KEY"        \
    -in deploy_rsa.enc          \
    -out /tmp/deploy_rsa -d

  chmod 600 /tmp/deploy_rsa

@goal deployed
@doc '[github] deploy'
@depends_on built
@depends_on deploy_rsa_decrypted
  set -v
  BRANCH="$GITHUB_REF_NAME"
  SSH_KEYS="-o StrictHostKeyChecking=no -i /tmp/deploy_rsa"
  SSH="ssh $SSH_KEYS"
  SCP="scp $SSH_KEYS"

  if [[ $BRANCH == master ]]
  then
    $SSH apps1@prod.cmlteam.com "
      (echo \"\$(date) next.cmlteam.com \$(pwd)\" ;
      rm -rf next.cmlteam.com                     ;
      mkdir next.cmlteam.com                      ;
      cd next.cmlteam.com                         ;
      echo 'User-agent: *'    > robots.txt        ;
      echo 'Disallow: /'     >> robots.txt        ;
      echo                   >> robots.txt        ;
      ) >> /tmp/.deploy 2>&1"
    cd _site ; $SCP -C -r * apps1@prod.cmlteam.com:~/next.cmlteam.com
  elif [[ $BRANCH == prod ]]
  then
    $SSH apps1@prod.cmlteam.com "
    (echo \"\$(date) www.cmlteam.com \$(pwd)\" ;
    rm -rf www.cmlteam.com                     ;
    mkdir www.cmlteam.com) >> /tmp/.deploy 2>&1"
    cd _site ; $SCP -C -r * apps1@prod.cmlteam.com:~/www.cmlteam.com
  else
    echo "Wrong branch: $BRANCH, won't deploy"
    exit 1
  fi


@goal bundle_installed @private
  bundle install

@goal built @private
@depends_on bundle_installed
  BRANCH="$GITHUB_REF_NAME"
  ENV_SPECIFIC_CONFIG_FILE="./_config_$BRANCH.yml"

  if [[ ! -e "$ENV_SPECIFIC_CONFIG_FILE" ]]
  then
    echo "Please provide an existing environment-specific file!"
    echo "Received: \"$ENV_SPECIFIC_CONFIG_FILE\""
    echo
    exit 1
  fi

  set -v

  bundle exec jekyll build --config=./_config.yml,"$ENV_SPECIFIC_CONFIG_FILE"
  #mv _site site # looks like deploy phase doesn't like underscores
  #echo www.cmlteam.com > site/CNAME # custom domain
  rm -f _site/*.sh _site/*.enc

